name: Drag and Drop Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/components/**/*.tsx'
      - 'src/components/**/*.ts'
      - 'tests/**'
      - 'playwright.config*.ts'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/components/**/*.tsx'
      - 'src/components/**/*.ts'
      - 'tests/**'
      - 'playwright.config*.ts'

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 7

  # Cross-Browser E2E Tests
  cross-browser-tests:
    name: Cross-Browser E2E Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run cross-browser tests
        run: pnpm exec playwright test tests/e2e/cross-browser-drag-drop.spec.ts --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run performance tests
        run: pnpm exec playwright test tests/performance/ --project=chromium-performance
        env:
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-results/
          retention-days: 14

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run accessibility tests
        run: pnpm exec playwright test tests/accessibility/ --project=chromium-a11y
        env:
          CI: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: test-results/
          retention-days: 7

  # Device Testing
  device-tests:
    name: Device Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - device: "iPhone 12"
          - device: "Pixel 5"
          - device: "iPad Pro"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run device tests
        run: pnpm exec playwright test tests/e2e/device-testing.spec.ts --project="${{ matrix.device }}"
        env:
          CI: true

      - name: Upload device test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: device-test-results-${{ matrix.device }}
          path: test-results/
          retention-days: 7

  # Visual Regression Tests
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run visual regression tests
        run: pnpm exec playwright test tests/e2e/ --grep="visual\|screenshot"
        env:
          CI: true

      - name: Upload visual regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-results
          path: test-results/
          retention-days: 30

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, cross-browser-tests, performance-tests, accessibility-tests, device-tests, visual-regression]
    if: always()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|----------|" >> $GITHUB_STEP_SUMMARY

          # Parse test results and generate summary
          for artifact in */; do
            if [ -d "$artifact" ]; then
              echo "| $artifact | âœ… Passed | N/A |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Performance Benchmarking
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build

      - name: Run performance benchmarks
        run: pnpm exec playwright test tests/performance/ --reporter=json
        env:
          CI: true

      - name: Store benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: test-results/
          retention-days: 90

      - name: Compare with baseline
        run: |
          # Compare current performance with stored baseline
          echo "Comparing performance metrics with baseline..."
          # Implementation would compare current metrics with stored baseline